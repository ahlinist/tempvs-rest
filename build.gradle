plugins {
    id 'java'
    id 'maven-publish'
    //id 'signing'
}

group 'club.tempvs'
version '1.2'

task sourcesJar(type: Jar) {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    from javadoc
    classifier = 'javadoc'
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'rest'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Tempvs rest'
                description = 'A simple rest api for tempvs-family projects'
                url = 'https://github.com/ahlinist/tempvs-rest'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'ahlinist'
                        name = 'Anton Hlinisty'
                        email = 'anton.hlinisty@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git:///github.com/ahlinist/tempvs-rest.git'
                    developerConnection = 'scm:git:ssh:///github.com/ahlinist/tempvs-rest.git'
                    url = 'https://github.com/ahlinist/tempvs-rest'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username System.getenv('SONATYPE_USERNAME')
                password System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

/*signing {
    sign publishing.publications.mavenJava
}*/

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html4', true)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //jersey-bom
    implementation "org.glassfish.jersey:jersey-bom:$jerseyVersion"
    //jersey
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    compile "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
    //json
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
    //jetty
    compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
    compile "org.eclipse.jetty:jetty-webapp:$jettyVersion"
    //testing
    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-bundle:$jerseyVersion"
    testCompile 'org.mockito:mockito-core:2.18.3'
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.compile
}
task stage() {
    dependsOn clean, copyToLib, jar
}
tasks.stage.doLast() {
    delete "build/tmp"
    delete "build/classes"
}
